/* BitvecLiteral -- Automatically generated by TreeBuilder (2022-06-30T15:29Z) */

package ast;

import java.math.BigInteger;

import de.uni_freiburg.informatik.ultimate.ltl2aut.ast.AstNode;
/**
 * Represents a bitvec literal which is a special form of a expression.
 */
public class IPMask extends AstNode {
    /**
     * The value of ip address represent in long.
     */
	long ipAddress;

	/**
     * The value of ip address represent in String.
     */
	String ipString;
	
    /**
     * The length of mask bits.
     */
    int mask;
    
    /**
     * The constructor taking initial values.
     * @param ipmask the string description of IPMask.
     */
    public IPMask(String ipmask) {
		int maskPos = ipmask.indexOf("/");
		int length = Integer.parseInt(ipmask.substring(maskPos+1));
		this.ipString = ipmask.substring(0, maskPos);
        this.ipAddress = parse_ip(ipString);
        this.mask = length;
        
        assert validate(): "Not a valid ip string for " + ipString;
    }
    
    /**
     * Returns the long description of the corresponding ip string.
     */
    private static long parse_ip(String ip) {
    	String[] part = ip.split("\\.");
        long num = 0;
        for (int i = 0; i < part.length; i++) {
            int power = 3 - i;
            num += ((Integer.parseInt(part[i]) % 256 * Math.pow(256, power)));
        }
        return num;
	}
    
    /**
     * Judges whether ip is a real ip string and mask <= 32.
     * Maybe is not needed for Jflex does the same thing.
     */
    public boolean validate() {
        String PATTERN = "^((0|1\\d?\\d?|2[0-4]?\\d?|25[0-5]?|[3-9]\\d?)\\.){3}(0|1\\d?\\d?|2[0-4]?\\d?|25[0-5]?|[3-9]\\d?)$";
        return ipString.matches(PATTERN) && mask <= 32;
    }
    
    /**
     * Returns a boogie description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(Long.toString(ipAddress)).append("bv32");
        return sb.toString();
    }

    /**
     * Gets the ip address given as long.
     * @return the value given as long.
     */
    public long getIPAddress() {
        return ipAddress;
    }
    
    
    /**
     * Gets the ip address given as string.
     * @return the value given as string.
     */
    public String getIPString() {
        return ipString;
    }

    /**
     * Gets the number of mask bits in this IPMask.
     * @return the number of bits in this IPMask.
     */
    public int getMask() {
        return mask;
    }
    
    /**
     * Gets the least significant bit of ip.
     * @return the least significant bit of ip.
     */
    public int getLSB() {
        return 32-mask;
    }
}
