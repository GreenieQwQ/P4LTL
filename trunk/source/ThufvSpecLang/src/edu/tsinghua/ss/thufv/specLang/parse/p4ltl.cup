// CUP specification for a simple expression evaluator (w/ actions)
package edu.tsinghua.ss.thufv.specLang.parse;
import com.github.jhoenicke.javacup.runtime.*;
import de.uni_freiburg.informatik.ultimate.ltl2aut.ast.*;
import ast.*;
import java.util.ArrayList;
import java.math.BigInteger;

parser P4LTLParser;
option symbols=P4LTLSymbols;

/* exprinals (tokens returned by the scanner). */
terminal           	LPAR, RPAR, MATCH, MODIFY, DROP, ALWAYS, EVENTUALLY, UNTIL, RELEASE, AND, OR, IMPLIES, NEXT, NEG, EQ, NEQ, COMMA, OLD, PLUS, MINUS;
terminal String 			NAME, BVINT, IPMASK;
terminal BigInteger 		INT;

/* Non-exprinals */
non terminal AstNode     		 texpr, predicate, match_args, header_eq, name, expr;

precedence right IMPLIES;
precedence left OR;
precedence left AND;
precedence left UNTIL, RELEASE;
precedence right ALWAYS, EVENTUALLY;
precedence right NEXT;
precedence left EQ, NEQ;
precedence left PLUS, MINUS;
precedence left NEG;

start with texpr;

/*rules*/

texpr ::=
	texpr:t1 AND texpr:t2
	{: RESULT = new BinaryTemporalOperator(BinaryTemporalType.and, t1, t2); :}
	
	| texpr:t1 OR texpr:t2
	{: RESULT = new BinaryTemporalOperator(BinaryTemporalType.or, t1, t2); :}
	
	| texpr:t1 IMPLIES texpr:t2
	{: RESULT = new BinaryTemporalOperator(BinaryTemporalType.implies, t1, t2); :}
	
	| texpr:t1 UNTIL texpr:t2
	{: RESULT = new BinaryTemporalOperator(BinaryTemporalType.until, t1, t2); :}
	
	| texpr:t1 RELEASE texpr:t2
	{: RESULT = new BinaryTemporalOperator(BinaryTemporalType.release, t1, t2); :}
	
	| ALWAYS LPAR texpr:t RPAR
	{: RESULT = new UnaryTemporalOperator(UnaryTemporalType.always, t); :}
	
	| EVENTUALLY LPAR texpr:t RPAR
	{: RESULT = new UnaryTemporalOperator(UnaryTemporalType.eventually, t); :}
	
	| NEXT LPAR texpr:t RPAR
	{: RESULT = new UnaryTemporalOperator(UnaryTemporalType.next, t); :}
	
	| NEG texpr:t
	{: RESULT = new UnaryTemporalOperator(UnaryTemporalType.neg, t); :}
	
	| LPAR texpr:t RPAR
	{: RESULT = t; :}
	
	| predicate:p
	{: RESULT = p; :}
	;

predicate ::= 
	MATCH LPAR match_args:margs RPAR
	{: RESULT = new Predicate(PredicateType.match, margs); :}
	| MODIFY LPAR match_args:margs RPAR
	{: RESULT = new Predicate(PredicateType.modify, margs); :}
	| DROP
	{: RESULT = new Predicate(PredicateType.drop); :}
	;

match_args ::=
	header_eq:he
	{: RESULT = new Arguments(he); :}
	
	| header_eq:he COMMA match_args:m
	{: RESULT = new Arguments(he, m); :}
	;

header_eq ::= 
	name:n EQ expr:e
	{: RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.eq, n, e); :}
	| name:n NEQ expr:e
	{: RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.neq, n, e); :}
	| name:n EQ IPMASK:ip
	{: RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.eq, n, new IPMask(ip)); :}
	| name:n NEQ IPMASK:ip
	{: RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.neq, n, new IPMask(ip)); :}
	;

expr ::=
	BVINT:bvi
	{: RESULT = new BitVec(bvi); :}
	| name:n
	{: RESULT = n; :}
	| expr:e1 PLUS expr:e2
	{: RESULT = new BinaryBitVecOperator(BinaryType.plus, e1, e2); :}
	| expr:e1 MINUS expr:e2
	{: RESULT = new BinaryBitVecOperator(BinaryType.minus, e1, e2); :}
	| OLD LPAR expr:e RPAR
	{: RESULT = new UnaryBitVecOperator(UnaryTemporalType.old, e); :}
	;

name ::= NAME:m
		{: RESULT = new Name(m); :};	